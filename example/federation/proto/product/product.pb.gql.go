// Code generated by protoc-gen-graphql-gateway. DO NOT EDIT.
// source: example/federation/proto/product/product.proto

/*
Package product is a reverse proxy.

It translates gRPC into GraphQL.
*/
package product

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/grpc-custom/graphql-gateway/runtime"
	"github.com/grpc-custom/graphql-gateway/runtime/cache"
	"github.com/grpc-custom/graphql-gateway/runtime/errors"
	"github.com/grpc-custom/graphql-gateway/runtime/scalar"
	"golang.org/x/sync/singleflight"
	"google.golang.org/grpc"
	"google.golang.org/grpc/grpclog"
)

var (
	productType = graphql.NewObject(graphql.ObjectConfig{
		Name: "Product",
		Fields: graphql.Fields{
			"upc": &graphql.Field{
				Type: scalar.String,
			},
			"name": &graphql.Field{
				Type: scalar.String,
			},
			"price": &graphql.Field{
				Type: scalar.Int32,
			},
		},
	})

	topProductsRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name:   "TopProductsRequest",
		Fields: graphql.Fields{},
	})

	topProductsResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "TopProductsResponse",
		Fields: graphql.Fields{
			"products": &graphql.Field{
				Type: graphql.NewList(graphql.NewNonNull(productType)),
			},
		},
	})

	getProductRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "GetProductRequest",
		Fields: graphql.Fields{
			"upc": &graphql.Field{
				Type: graphql.NewNonNull(scalar.String),
			},
		},
	})

	getProductResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "GetProductResponse",
		Fields: graphql.Fields{
			"products": &graphql.Field{
				Type: graphql.NewNonNull(productType),
			},
		},
	})
)

func RegisterGQLObjectTypes(mux *runtime.ServeMux) {
	mux.AddObjectType(productType)
}

type extendReviewProduct interface {
	GetProductId() string
}

type productServiceResolver struct {
	client ProductServiceClient
	group  singleflight.Group
	c      cache.Cache
}

func newProductServiceResolver(client ProductServiceClient) *productServiceResolver {
	return &productServiceResolver{
		client: client,
		group:  singleflight.Group{},
		c:      cache.New(100),
	}
}

func (r *productServiceResolver) FieldTopProducts() *graphql.Field {
	field := &graphql.Field{
		Name:        "/product.ProductService/TopProducts",
		Description: "",
		Type:        graphql.NewList(graphql.NewNonNull(productType)),
		Args:        graphql.FieldConfigArgument{},
		Resolve:     r.resolveTopProducts,
	}
	return field
}

func (r *productServiceResolver) resolveTopProducts(p graphql.ResolveParams) (interface{}, error) {
	in := &TopProductsRequest{}
	ctx := runtime.Context(p.Context)
	if timeout := runtime.GrpcTimeout(ctx); timeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeout)
		defer cancel()
	}
	out, err := r.client.TopProducts(ctx, in)
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	return out.Products, nil
}

func (r *productServiceResolver) extendReviewProduct() *graphql.Field {
	return &graphql.Field{
		Type: graphql.NewNonNull(productType),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			ctx := runtime.Context(p.Context)
			src, ok := p.Source.(extendReviewProduct)
			if !ok {
				return nil, errors.ErrWrongType
			}
			args := p.Args
			args["upc"] = src.GetProductId()
			return r.resolveGetProduct(ctx, args)
		},
	}
}

func (r *productServiceResolver) resolveGetProduct(ctx context.Context, args map[string]interface{}) (interface{}, error) {
	in := new(GetProductRequest)
	valueUpc, ok := args["upc"].(string)
	if !ok {
		valueUpc = ""
	}
	in.Upc = valueUpc
	out, err := r.client.GetProduct(ctx, in)
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	return out.Products, nil
}

func RegisterProductServiceFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.DialContext(ctx, endpoint, opts...)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
		}()
	}()
	return RegisterProductServiceHandler(mux, conn)
}

func RegisterProductServiceHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterProductServiceHandlerClient(mux, NewProductServiceClient(conn))
}

func RegisterProductServiceHandlerClient(mux *runtime.ServeMux, client ProductServiceClient) error {
	svc := newProductServiceResolver(client)
	// gRPC /product.ProductService/TopProducts
	mux.AddQuery("topProducts", svc.FieldTopProducts())
	// extend Review.product
	mux.AddField("Review", "product", svc.extendReviewProduct())
	return nil
}
