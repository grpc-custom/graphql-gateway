// Code generated by protoc-gen-alcyone. DO NOT EDIT.
// source: test/basic/user.proto

/*
Package user is a reverse proxy.

It translates gRPC into GraphQL.
*/
package user

import (
	"context"

	"github.com/golang/protobuf/ptypes/timestamp"
	"github.com/graphql-go/graphql"
	"github.com/grpc-custom/graphql-gateway/runtime"
	"github.com/grpc-custom/graphql-gateway/runtime/scalar"
	"google.golang.org/grpc"
	"google.golang.org/grpc/grpclog"
)

var (
	userType = graphql.NewObject(graphql.ObjectConfig{
		Name: "User",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: graphql.NewNonNull(scalar.String),
			},
			"name": &graphql.Field{
				Type: graphql.NewNonNull(scalar.String),
			},
			"birthdate": &graphql.Field{
				Type: graphql.NewNonNull(scalar.Int32),
			},
			"point": &graphql.Field{
				Type: graphql.NewNonNull(scalar.Int64),
			},
			"disabled": &graphql.Field{
				Type: graphql.NewNonNull(scalar.Bool),
			},
			"gender": &graphql.Field{
				Type: graphql.NewNonNull(scalar.Int32),
			},
			"createdAt": &graphql.Field{
				Type: graphql.NewNonNull(scalar.Timestamp),
			},
			"updatedAt": &graphql.Field{
				Type: graphql.NewNonNull(scalar.Timestamp),
			},
		},
	})

	getUserRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "GetUserRequest",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: graphql.NewNonNull(scalar.String),
			},
		},
	})

	getUserResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "GetUserResponse",
		Fields: graphql.Fields{
			"user": &graphql.Field{
				Type: graphql.NewNonNull(userType),
			},
		},
	})

	listUsersRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name:   "ListUsersRequest",
		Fields: graphql.Fields{},
	})

	listUsersResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "ListUsersResponse",
		Fields: graphql.Fields{
			"users": &graphql.Field{
				Type: graphql.NewList(graphql.NewNonNull(userType)),
			},
		},
	})

	createUserRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "CreateUserRequest",
		Fields: graphql.Fields{
			"name": &graphql.Field{
				Type: graphql.NewNonNull(scalar.String),
			},
			"birthdate": &graphql.Field{
				Type: graphql.NewNonNull(scalar.Int32),
			},
			"point": &graphql.Field{
				Type: graphql.NewNonNull(scalar.Int64),
			},
			"disabled": &graphql.Field{
				Type: graphql.NewNonNull(scalar.Bool),
			},
			"gender": &graphql.Field{
				Type: graphql.NewNonNull(scalar.Int32),
			},
			"time": &graphql.Field{
				Type: graphql.NewNonNull(scalar.Timestamp),
			},
		},
	})
)

func RegisterUserServiceFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.DialContext(ctx, endpoint, opts...)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
		}()
	}()
	return RegisterUserServiceHandler(mux, conn)
}

func RegisterUserServiceHandler(mux *runtime.ServeHux, conn *grpc.ClientConn) error {
	return RegisterUserServiceHandlerClient(mux, NewUserServiceClient(conn))
}

func RegisterUserServiceHandlerClient(mux *runtime.ServeMux, client UserServiceClient) error {
	// gRPC /user.UserService/GetUser
	getUserField := &graphql.Field{
		Name:        "/user.UserService/GetUser",
		Description: "gets a user",
		Type:        getUserResponseType,
		Args: graphql.FieldConfigArgument{
			"id": &graphql.ArgumentConfig{
				Type: graphql.NewNonNull(scalar.String),
			},
		},
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			in := &GetUserRequest{}
			valueId, ok := p.Args["id"].(string)
			if !ok {
				return nil, runtime.ErrInvalidArguments
			}
			in.Id = valueId
			ctx := runtime.Context(p.Context)
			return client.GetUser(ctx, in)
		},
	}
	mux.AddQuery("getUser", getUserField)
	// gRPC /user.UserService/ListUsers
	listUsersField := &graphql.Field{
		Name:        "/user.UserService/ListUsers",
		Description: "get user list",
		Type:        listUsersResponseType,
		Args:        graphql.FieldConfigArgument{},
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			in := &ListUsersRequest{}
			ctx := runtime.Context(p.Context)
			return client.ListUsers(ctx, in)
		},
	}
	mux.AddQuery("listUsers", listUsersField)
	// gRPC /user.UserService/CreateUser
	createUserField := &graphql.Field{
		Name:        "/user.UserService/CreateUser",
		Description: "creates a user",
		Type:        scalar.Empty,
		Args: graphql.FieldConfigArgument{
			"name": &graphql.ArgumentConfig{
				Type: graphql.NewNonNull(scalar.String),
			},
			"birthdate": &graphql.ArgumentConfig{
				Type: graphql.NewNonNull(scalar.Int32),
			},
			"point": &graphql.ArgumentConfig{
				Type: graphql.NewNonNull(scalar.Int64),
			},
			"disabled": &graphql.ArgumentConfig{
				Type: graphql.NewNonNull(scalar.Bool),
			},
			"gender": &graphql.ArgumentConfig{
				Type: graphql.NewNonNull(scalar.Int32),
			},
			"time": &graphql.ArgumentConfig{
				Type: graphql.NewNonNull(scalar.Timestamp),
			},
		},
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			in := &CreateUserRequest{}
			valueName, ok := p.Args["name"].(string)
			if !ok {
				return nil, runtime.ErrInvalidArguments
			}
			in.Name = valueName
			valueBirthdate, ok := p.Args["birthdate"].(int32)
			if !ok {
				return nil, runtime.ErrInvalidArguments
			}
			in.Birthdate = valueBirthdate
			valuePoint, ok := p.Args["point"].(int64)
			if !ok {
				return nil, runtime.ErrInvalidArguments
			}
			in.Point = valuePoint
			valueDisabled, ok := p.Args["disabled"].(bool)
			if !ok {
				return nil, runtime.ErrInvalidArguments
			}
			in.Disabled = valueDisabled
			valueGender, ok := p.Args["gender"].(int32)
			if !ok {
				return nil, runtime.ErrInvalidArguments
			}
			in.Gender = valueGender
			valueTime, ok := p.Args["time"].(*timestamp.Timestamp)
			if !ok {
				return nil, runtime.ErrInvalidArguments
			}
			in.Time = valueTime
			ctx := runtime.Context(p.Context)
			return client.CreateUser(ctx, in)
		},
	}
	mux.AddMutation("createUser", createUserField)
}
