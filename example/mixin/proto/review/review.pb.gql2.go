// Code generated by protoc-gen-graphql-gateway. DO NOT EDIT.
// source: example/mixin/proto/review/review.proto

/*
Package review is a reverse proxy.

It translates gRPC into GraphQL.
*/
package review

import (
	"context"
	"fmt"

	"github.com/graphql-go/graphql"
	"github.com/grpc-custom/graphql-gateway/runtime"
	"github.com/grpc-custom/graphql-gateway/runtime/cache"
	"github.com/grpc-custom/graphql-gateway/runtime/errors"
	"github.com/grpc-custom/graphql-gateway/runtime/scalar"
	"golang.org/x/sync/singleflight"
	"google.golang.org/grpc"
	"google.golang.org/grpc/grpclog"
)

var (
	reviewType = graphql.NewObject(graphql.ObjectConfig{
		Name: "Review",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: scalar.String,
			},
			"body": &graphql.Field{
				Type: scalar.String,
			},
			"authorId": &graphql.Field{
				Type: scalar.String,
			},
			"productUpc": &graphql.Field{
				Type: scalar.String,
			},
		},
	})

	getReviewRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "GetReviewRequest",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: scalar.String,
			},
		},
	})

	getReviewResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "GetReviewResponse",
		Fields: graphql.Fields{
			"review": &graphql.Field{
				Type: graphql.NewNonNull(reviewType),
			},
		},
	})

	listUserReviewsRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "ListUserReviewsRequest",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: scalar.String,
			},
			"first": &graphql.Field{
				Type: graphql.NewNonNull(scalar.Int32),
			},
		},
	})

	listUserReviewsResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "ListUserReviewsResponse",
		Fields: graphql.Fields{
			"reviews": &graphql.Field{
				Type: graphql.NewList(reviewType),
			},
		},
	})

	listProductReviewsRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "ListProductReviewsRequest",
		Fields: graphql.Fields{
			"upc": &graphql.Field{
				Type: scalar.String,
			},
		},
	})

	listProductReviewsResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "ListProductReviewsResponse",
		Fields: graphql.Fields{
			"reviews": &graphql.Field{
				Type: graphql.NewList(reviewType),
			},
		},
	})
)

type reviewServiceResolver struct {
	client ReviewServiceClient
	group  singleflight.Group
	c      cache.Cache
}

func newReviewServiceResolver(client ReviewServiceClient) *reviewServiceResolver {
	return &reviewServiceResolver{
		client: client,
		group:  singleflight.Group{},
		c:      cache.New(100),
	}
}

func (r *reviewServiceResolver) ExtendUserReviews(mux *runtime.ServeMux) {
	field := &graphql.Field{
		Name:        "/review.ReviewService/ListUserReviews",
		Description: "",
		Type:        listUserReviewsResponseType,
		Args: graphql.FieldConfigArgument{
			"first": &graphql.ArgumentConfig{
				Type:         scalar.Int32,
				DefaultValue: 5,
			},
		},
		Resolve: r.resolveListUserReviews,
	}
	mux.AddField("User", "reviews", field)
	return
}

func (r *reviewServiceResolver) resolveListUserReviews(p graphql.ResolveParams) (interface{}, error) {
	in := &ListUserReviewsRequest{}
	in.Id = "default"
	valueFirst, ok := p.Args["first"].(int32)
	if !ok {
		valueFirst = 0
	}
	in.First = valueFirst
	ctx := runtime.Context(p.Context)
	result, err := r.client.ListUserReviews(ctx, in)
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	return result, nil
}

func (r *reviewServiceResolver) ExtendProductReviews(mux *runtime.ServeMux) {
	field := &graphql.Field{
		Name:        "/review.RevireService/ListProductReviews",
		Description: "",
		Type:        listProductReviewsResponseType,
		Resolve:     r.resolverListProductReviews,
	}
	fmt.Println("--->")
	mux.AddField("Product", "reviews", field)
	return
}

func (r *reviewServiceResolver) resolverListProductReviews(p graphql.ResolveParams) (interface{}, error) {
	in := &ListProductReviewsRequest{}
	in.Upc = "test"
	ctx := runtime.Context(p.Context)
	result, err := r.client.ListProductReviews(ctx, in)
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	return result, nil
}

func RegisterReviewServiceFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.DialContext(ctx, endpoint, opts...)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
		}()
	}()
	return RegisterReviewServiceHandler(mux, conn)
}

func RegisterReviewServiceHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterReviewServiceHandlerClient(mux, NewReviewServiceClient(conn))
}

func RegisterReviewServiceHandlerClient(mux *runtime.ServeMux, client ReviewServiceClient) error {

	mux.AddObjectType(reviewType)

	svc := newReviewServiceResolver(client)
	svc.ExtendUserReviews(mux)
	svc.ExtendProductReviews(mux)
	return nil
}
