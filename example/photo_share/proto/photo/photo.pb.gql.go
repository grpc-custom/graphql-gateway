// Code generated by protoc-gen-graphql-gateway. DO NOT EDIT.
// source: example/photo_share/proto/photo/photo.proto

/*
Package photo is a reverse proxy.

It translates gRPC into GraphQL.
*/
package photo

import (
	"context"

	"github.com/golang/protobuf/ptypes/empty"
	"github.com/graphql-go/graphql"
	"github.com/grpc-custom/graphql-gateway/runtime"
	"github.com/grpc-custom/graphql-gateway/runtime/scalar"
	"google.golang.org/grpc"
	"google.golang.org/grpc/grpclog"
)

var (
	photoType = graphql.NewObject(graphql.ObjectConfig{
		Name: "Photo",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: scalar.String,
			},
			"name": &graphql.Field{
				Type: scalar.String,
			},
			"url": &graphql.Field{
				Type: scalar.String,
			},
			"description": &graphql.Field{
				Type: scalar.String,
			},
			"category": &graphql.Field{
				Type: scalar.Int32,
			},
			"created": &graphql.Field{
				Type: scalar.Timestamp,
			},
		},
	})

	totalPhotosResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "TotalPhotosResponse",
		Fields: graphql.Fields{
			"total": &graphql.Field{
				Type: scalar.Int32,
			},
		},
	})

	allPhotosResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "AllPhotosResponse",
		Fields: graphql.Fields{
			"photos": &graphql.Field{
				Type: graphql.NewList(photoType),
			},
		},
	})

	photoRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "PhotoRequest",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: scalar.String,
			},
		},
	})

	photoResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "PhotoResponse",
		Fields: graphql.Fields{
			"photo": &graphql.Field{
				Type: photoType,
			},
		},
	})

	postPhotoRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "PostPhotoRequest",
		Fields: graphql.Fields{
			"name": &graphql.Field{
				Type: scalar.String,
			},
			"category": &graphql.Field{
				Type: scalar.Int32,
			},
			"description": &graphql.Field{
				Type: scalar.String,
			},
		},
	})

	tagPhotoRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "TagPhotoRequest",
		Fields: graphql.Fields{
			"githubLogin": &graphql.Field{
				Type: scalar.String,
			},
			"photoId": &graphql.Field{
				Type: scalar.String,
			},
		},
	})
)

func RegisterPhotoServiceFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.DialContext(ctx, endpoint, opts...)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
		}()
	}()
	return RegisterPhotoServiceHandler(mux, conn)
}

func RegisterPhotoServiceHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterPhotoServiceHandlerClient(mux, NewPhotoServiceClient(conn))
}

func RegisterPhotoServiceHandlerClient(mux *runtime.ServeMux, client PhotoServiceClient) error {
	// gRPC /photo.PhotoService/TotalPhotos
	totalPhotosField := &graphql.Field{
		Name:        "/photo.PhotoService/TotalPhotos",
		Description: "",
		Type:        totalPhotosResponseType,
		Args:        graphql.FieldConfigArgument{},
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			in := &empty.Empty{}
			ctx := runtime.Context(p.Context)
			return client.TotalPhotos(ctx, in)
		},
	}
	mux.AddQuery("totalPhotos", totalPhotosField)
	// gRPC /photo.PhotoService/AllPhotos
	allPhotosField := &graphql.Field{
		Name:        "/photo.PhotoService/AllPhotos",
		Description: "",
		Type:        allPhotosResponseType,
		Args:        graphql.FieldConfigArgument{},
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			in := &empty.Empty{}
			ctx := runtime.Context(p.Context)
			return client.AllPhotos(ctx, in)
		},
	}
	mux.AddQuery("allPhotos", allPhotosField)
	// gRPC /photo.PhotoService/Photo
	photoField := &graphql.Field{
		Name:        "/photo.PhotoService/Photo",
		Description: "",
		Type:        photoResponseType,
		Args: graphql.FieldConfigArgument{
			"id": &graphql.ArgumentConfig{
				Type: scalar.String,
			},
		},
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			in := &PhotoRequest{}
			valueId, ok := p.Args["id"].(string)
			if !ok {
				valueId = ""
			}
			in.Id = valueId
			ctx := runtime.Context(p.Context)
			return client.Photo(ctx, in)
		},
	}
	mux.AddQuery("photo", photoField)
	// gRPC /photo.PhotoService/PostPhoto
	postPhotoField := &graphql.Field{
		Name:        "/photo.PhotoService/PostPhoto",
		Description: "",
		Type:        photoResponseType,
		Args: graphql.FieldConfigArgument{
			"name": &graphql.ArgumentConfig{
				Type: scalar.String,
			},
			"category": &graphql.ArgumentConfig{
				Type: scalar.Int32,
			},
			"description": &graphql.ArgumentConfig{
				Type: scalar.String,
			},
		},
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			in := &PostPhotoRequest{}
			valueName, ok := p.Args["name"].(string)
			if !ok {
				valueName = ""
			}
			in.Name = valueName
			valueCategory, ok := p.Args["category"].(PhotoCategory)
			if !ok {
				valueCategory = 0
			}
			in.Category = valueCategory
			valueDescription, ok := p.Args["description"].(string)
			if !ok {
				valueDescription = ""
			}
			in.Description = valueDescription
			ctx := runtime.Context(p.Context)
			return client.PostPhoto(ctx, in)
		},
	}
	mux.AddMutation("postPhoto", postPhotoField)
	// gRPC /photo.PhotoService/TagPhoto
	tagPhotoField := &graphql.Field{
		Name:        "/photo.PhotoService/TagPhoto",
		Description: "",
		Type:        scalar.Empty,
		Args: graphql.FieldConfigArgument{
			"githubLogin": &graphql.ArgumentConfig{
				Type: scalar.String,
			},
			"photoId": &graphql.ArgumentConfig{
				Type: scalar.String,
			},
		},
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			in := &TagPhotoRequest{}
			valueGithubLogin, ok := p.Args["githubLogin"].(string)
			if !ok {
				valueGithubLogin = ""
			}
			in.GithubLogin = valueGithubLogin
			valuePhotoId, ok := p.Args["photoId"].(string)
			if !ok {
				valuePhotoId = ""
			}
			in.PhotoId = valuePhotoId
			ctx := runtime.Context(p.Context)
			return client.TagPhoto(ctx, in)
		},
	}
	mux.AddMutation("tagPhoto", tagPhotoField)
	return nil
}
