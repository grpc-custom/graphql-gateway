// Code generated by protoc-gen-graphql-gateway. DO NOT EDIT.
// source: example/photo_share/proto/user/user.proto

/*
Package user is a reverse proxy.

It translates gRPC into GraphQL.
*/
package user

import (
	"context"

	"github.com/golang/protobuf/ptypes/empty"
	"github.com/graphql-go/graphql"
	"github.com/grpc-custom/graphql-gateway/runtime"
	"github.com/grpc-custom/graphql-gateway/runtime/cache"
	"github.com/grpc-custom/graphql-gateway/runtime/errors"
	"github.com/grpc-custom/graphql-gateway/runtime/scalar"
	"golang.org/x/sync/singleflight"
	"google.golang.org/grpc"
	"google.golang.org/grpc/grpclog"
)

var (
	userType = graphql.NewObject(graphql.ObjectConfig{
		Name: "User",
		Fields: graphql.Fields{
			"githubLogin": &graphql.Field{
				Type: scalar.String,
			},
			"name": &graphql.Field{
				Type: scalar.String,
			},
			"avatar": &graphql.Field{
				Type: scalar.String,
			},
		},
	})

	userResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "UserResponse",
		Fields: graphql.Fields{
			"user": &graphql.Field{
				Type: userType,
			},
		},
	})

	totalUsersResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "TotalUsersResponse",
		Fields: graphql.Fields{
			"total": &graphql.Field{
				Type: scalar.Int32,
			},
		},
	})

	allUsersResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "AllUsersResponse",
		Fields: graphql.Fields{
			"users": &graphql.Field{
				Type: graphql.NewList(userType),
			},
		},
	})

	loginRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "LoginRequest",
		Fields: graphql.Fields{
			"login": &graphql.Field{
				Type: scalar.String,
			},
		},
	})

	githubAuthRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "GithubAuthRequest",
		Fields: graphql.Fields{
			"code": &graphql.Field{
				Type: scalar.String,
			},
		},
	})

	githubAuthResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "GithubAuthResponse",
		Fields: graphql.Fields{
			"token": &graphql.Field{
				Type: scalar.String,
			},
			"user": &graphql.Field{
				Type: userType,
			},
		},
	})
)

type userServerResolver struct {
	client UserServerClient
	group  singleflight.Group
	c      cache.Cache
}

func newUserServerResolver(client UserServerClient) *userServerResolver {
	return &userServerResolver{
		client: client,
		group:  singleflight.Group{},
		c:      cache.New(100),
	}
}

func (r *userServerResolver) FieldMe() *graphql.Field {
	field := &graphql.Field{
		Name:        "/user.UserServer/Me",
		Description: "",
		Type:        userResponseType,
		Args:        graphql.FieldConfigArgument{},
		Resolve:     r.resolveMe,
	}
	return field
}

func (r *userServerResolver) resolveMe(p graphql.ResolveParams) (interface{}, error) {
	in := &empty.Empty{}
	ctx := runtime.Context(p.Context)
	if timeout := runtime.GrpcTimeout(ctx); timeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeout)
		defer cancel()
	}
	result, err := r.client.Me(ctx, in)
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	return result, nil
}

func (r *userServerResolver) FieldTotalUsers() *graphql.Field {
	field := &graphql.Field{
		Name:        "/user.UserServer/TotalUsers",
		Description: "",
		Type:        totalUsersResponseType,
		Args:        graphql.FieldConfigArgument{},
		Resolve:     r.resolveTotalUsers,
	}
	return field
}

func (r *userServerResolver) resolveTotalUsers(p graphql.ResolveParams) (interface{}, error) {
	in := &empty.Empty{}
	ctx := runtime.Context(p.Context)
	if timeout := runtime.GrpcTimeout(ctx); timeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeout)
		defer cancel()
	}
	result, err := r.client.TotalUsers(ctx, in)
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	return result, nil
}

func (r *userServerResolver) FieldAllUsers() *graphql.Field {
	field := &graphql.Field{
		Name:        "/user.UserServer/AllUsers",
		Description: "",
		Type:        allUsersResponseType,
		Args:        graphql.FieldConfigArgument{},
		Resolve:     r.resolveAllUsers,
	}
	return field
}

func (r *userServerResolver) resolveAllUsers(p graphql.ResolveParams) (interface{}, error) {
	in := &empty.Empty{}
	ctx := runtime.Context(p.Context)
	if timeout := runtime.GrpcTimeout(ctx); timeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeout)
		defer cancel()
	}
	result, err := r.client.AllUsers(ctx, in)
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	return result, nil
}

func (r *userServerResolver) FieldUser() *graphql.Field {
	field := &graphql.Field{
		Name:        "/user.UserServer/User",
		Description: "",
		Type:        userResponseType,
		Args: graphql.FieldConfigArgument{
			"login": &graphql.ArgumentConfig{
				Type: scalar.String,
			},
		},
		Resolve: r.resolveUser,
	}
	return field
}

func (r *userServerResolver) resolveUser(p graphql.ResolveParams) (interface{}, error) {
	in := &LoginRequest{}
	valueLogin, ok := p.Args["login"].(string)
	if !ok {
		valueLogin = ""
	}
	in.Login = valueLogin
	ctx := runtime.Context(p.Context)
	if timeout := runtime.GrpcTimeout(ctx); timeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeout)
		defer cancel()
	}
	result, err := r.client.User(ctx, in)
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	return result, nil
}

func (r *userServerResolver) FieldGithubAuth() *graphql.Field {
	field := &graphql.Field{
		Name:        "/user.UserServer/GithubAuth",
		Description: "",
		Type:        githubAuthResponseType,
		Args: graphql.FieldConfigArgument{
			"code": &graphql.ArgumentConfig{
				Type: scalar.String,
			},
		},
		Resolve: r.resolveGithubAuth,
	}
	return field
}

func (r *userServerResolver) resolveGithubAuth(p graphql.ResolveParams) (interface{}, error) {
	in := &GithubAuthRequest{}
	valueCode, ok := p.Args["code"].(string)
	if !ok {
		valueCode = ""
	}
	in.Code = valueCode
	ctx := runtime.Context(p.Context)
	if timeout := runtime.GrpcTimeout(ctx); timeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeout)
		defer cancel()
	}
	result, err := r.client.GithubAuth(ctx, in)
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	return result, nil
}

func RegisterUserServerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.DialContext(ctx, endpoint, opts...)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
		}()
	}()
	return RegisterUserServerHandler(mux, conn)
}

func RegisterUserServerHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterUserServerHandlerClient(mux, NewUserServerClient(conn))
}

func RegisterUserServerHandlerClient(mux *runtime.ServeMux, client UserServerClient) error {
	svc := newUserServerResolver(client)
	// gRPC /user.UserServer/Me
	mux.AddQuery("me", svc.FieldMe())
	// gRPC /user.UserServer/TotalUsers
	mux.AddQuery("totalUsers", svc.FieldTotalUsers())
	// gRPC /user.UserServer/AllUsers
	mux.AddQuery("allUsers", svc.FieldAllUsers())
	// gRPC /user.UserServer/User
	mux.AddQuery("user", svc.FieldUser())
	// gRPC /user.UserServer/GithubAuth
	mux.AddMutation("githubAuth", svc.FieldGithubAuth())
	return nil
}
