// Code generated by protoc-gen-graphql-gateway. DO NOT EDIT.
// source: example/photo_share/proto/photo/photo.proto

/*
Package photo is a reverse proxy.

It translates gRPC into GraphQL.
*/
package photo

import (
	"context"
	"time"

	"github.com/golang/protobuf/ptypes/empty"
	"github.com/graphql-go/graphql"
	"github.com/grpc-custom/graphql-gateway/runtime"
	"github.com/grpc-custom/graphql-gateway/runtime/cache"
	"github.com/grpc-custom/graphql-gateway/runtime/errors"
	"github.com/grpc-custom/graphql-gateway/runtime/scalar"
	"golang.org/x/sync/singleflight"
	"google.golang.org/grpc"
	"google.golang.org/grpc/grpclog"
)

var (
	photoType = graphql.NewObject(graphql.ObjectConfig{
		Name: "Photo",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: scalar.String,
			},
			"name": &graphql.Field{
				Type: scalar.String,
			},
			"url": &graphql.Field{
				Type: scalar.String,
			},
			"description": &graphql.Field{
				Type: scalar.String,
			},
			"category": &graphql.Field{
				Type: scalar.Int32,
			},
			"created": &graphql.Field{
				Type: scalar.Timestamp,
			},
		},
	})

	totalPhotosResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "TotalPhotosResponse",
		Fields: graphql.Fields{
			"total": &graphql.Field{
				Type: scalar.Int32,
			},
		},
	})

	allPhotosResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "AllPhotosResponse",
		Fields: graphql.Fields{
			"photos": &graphql.Field{
				Type: graphql.NewList(photoType),
			},
		},
	})

	photoRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "PhotoRequest",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: scalar.String,
			},
		},
	})

	photoResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "PhotoResponse",
		Fields: graphql.Fields{
			"photo": &graphql.Field{
				Type: photoType,
			},
		},
	})

	postPhotoRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "PostPhotoRequest",
		Fields: graphql.Fields{
			"name": &graphql.Field{
				Type: scalar.String,
			},
			"category": &graphql.Field{
				Type: scalar.Int32,
			},
			"description": &graphql.Field{
				Type: scalar.String,
			},
		},
	})

	tagPhotoRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "TagPhotoRequest",
		Fields: graphql.Fields{
			"githubLogin": &graphql.Field{
				Type: scalar.String,
			},
			"photoId": &graphql.Field{
				Type: scalar.String,
			},
		},
	})
)

type photoServiceResolver struct {
	client PhotoServiceClient
	group  singleflight.Group
	c      cache.Cache
}

func newPhotoServiceResolver(client PhotoServiceClient) *photoServiceResolver {
	return &photoServiceResolver{
		client: client,
		group:  singleflight.Group{},
		c:      cache.New(100),
	}
}

func (r *photoServiceResolver) FieldTotalPhotos() *graphql.Field {
	field := &graphql.Field{
		Name:        "/photo.PhotoService/TotalPhotos",
		Description: "",
		Type:        totalPhotosResponseType,
		Args:        graphql.FieldConfigArgument{},
		Resolve:     r.resolveTotalPhotos,
	}
	return field
}

func (r *photoServiceResolver) resolveTotalPhotos(p graphql.ResolveParams) (interface{}, error) {
	in := &empty.Empty{}
	ctx := runtime.Context(p.Context)
	// cache control max age: 120 second
	key := cache.GenerateKey("/photo.PhotoService/TotalPhotos", in)
	value, ok := r.c.Get(key)
	if ok {
		return value, nil
	}
	result, err, _ := r.group.Do(key, func() (interface{}, error) {
		if timeout := runtime.GrpcTimeout(ctx); timeout > 0 {
			var cancel context.CancelFunc
			ctx, cancel = context.WithTimeout(ctx, timeout)
			defer cancel()
		}
		return r.client.TotalPhotos(ctx, in)
	})
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	r.c.Set(key, result, 120*time.Second)
	return result, nil
}

func (r *photoServiceResolver) FieldAllPhotos() *graphql.Field {
	field := &graphql.Field{
		Name:        "/photo.PhotoService/AllPhotos",
		Description: "",
		Type:        allPhotosResponseType,
		Args:        graphql.FieldConfigArgument{},
		Resolve:     r.resolveAllPhotos,
	}
	return field
}

func (r *photoServiceResolver) resolveAllPhotos(p graphql.ResolveParams) (interface{}, error) {
	in := &empty.Empty{}
	ctx := runtime.Context(p.Context)
	// cache control max age: 120 second
	key := cache.GenerateKey("/photo.PhotoService/AllPhotos", in)
	value, ok := r.c.Get(key)
	if ok {
		return value, nil
	}
	result, err, _ := r.group.Do(key, func() (interface{}, error) {
		if timeout := runtime.GrpcTimeout(ctx); timeout > 0 {
			var cancel context.CancelFunc
			ctx, cancel = context.WithTimeout(ctx, timeout)
			defer cancel()
		}
		return r.client.AllPhotos(ctx, in)
	})
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	r.c.Set(key, result, 120*time.Second)
	return result, nil
}

func (r *photoServiceResolver) FieldPhoto() *graphql.Field {
	field := &graphql.Field{
		Name:        "/photo.PhotoService/Photo",
		Description: "",
		Type:        photoResponseType,
		Args: graphql.FieldConfigArgument{
			"id": &graphql.ArgumentConfig{
				Type: scalar.String,
			},
		},
		Resolve: r.resolvePhoto,
	}
	return field
}

func (r *photoServiceResolver) resolvePhoto(p graphql.ResolveParams) (interface{}, error) {
	in := &PhotoRequest{}
	valueId, ok := p.Args["id"].(string)
	if !ok {
		valueId = ""
	}
	in.Id = valueId
	ctx := runtime.Context(p.Context)
	// cache control max age: 60 second
	key := cache.GenerateKey("/photo.PhotoService/Photo", in)
	value, ok := r.c.Get(key)
	if ok {
		return value, nil
	}
	result, err, _ := r.group.Do(key, func() (interface{}, error) {
		if timeout := runtime.GrpcTimeout(ctx); timeout > 0 {
			var cancel context.CancelFunc
			ctx, cancel = context.WithTimeout(ctx, timeout)
			defer cancel()
		}
		return r.client.Photo(ctx, in)
	})
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	r.c.Set(key, result, 60*time.Second)
	return result, nil
}

func (r *photoServiceResolver) FieldPostPhoto() *graphql.Field {
	field := &graphql.Field{
		Name:        "/photo.PhotoService/PostPhoto",
		Description: "",
		Type:        photoResponseType,
		Args: graphql.FieldConfigArgument{
			"name": &graphql.ArgumentConfig{
				Type: scalar.String,
			},
			"category": &graphql.ArgumentConfig{
				Type: scalar.Int32,
			},
			"description": &graphql.ArgumentConfig{
				Type: scalar.String,
			},
		},
		Resolve: r.resolvePostPhoto,
	}
	return field
}

func (r *photoServiceResolver) resolvePostPhoto(p graphql.ResolveParams) (interface{}, error) {
	in := &PostPhotoRequest{}
	valueName, ok := p.Args["name"].(string)
	if !ok {
		valueName = ""
	}
	in.Name = valueName
	valueCategory, ok := p.Args["category"].(PhotoCategory)
	if !ok {
		valueCategory = 0
	}
	in.Category = valueCategory
	valueDescription, ok := p.Args["description"].(string)
	if !ok {
		valueDescription = ""
	}
	in.Description = valueDescription
	ctx := runtime.Context(p.Context)
	if timeout := runtime.GrpcTimeout(ctx); timeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeout)
		defer cancel()
	}
	result, err := r.client.PostPhoto(ctx, in)
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	return result, nil
}

func (r *photoServiceResolver) FieldTagPhoto() *graphql.Field {
	field := &graphql.Field{
		Name:        "/photo.PhotoService/TagPhoto",
		Description: "",
		Type:        scalar.Empty,
		Args: graphql.FieldConfigArgument{
			"githubLogin": &graphql.ArgumentConfig{
				Type: scalar.String,
			},
			"photoId": &graphql.ArgumentConfig{
				Type: scalar.String,
			},
		},
		Resolve: r.resolveTagPhoto,
	}
	return field
}

func (r *photoServiceResolver) resolveTagPhoto(p graphql.ResolveParams) (interface{}, error) {
	in := &TagPhotoRequest{}
	valueGithubLogin, ok := p.Args["githubLogin"].(string)
	if !ok {
		valueGithubLogin = ""
	}
	in.GithubLogin = valueGithubLogin
	valuePhotoId, ok := p.Args["photoId"].(string)
	if !ok {
		valuePhotoId = ""
	}
	in.PhotoId = valuePhotoId
	ctx := runtime.Context(p.Context)
	if timeout := runtime.GrpcTimeout(ctx); timeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeout)
		defer cancel()
	}
	result, err := r.client.TagPhoto(ctx, in)
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	return result, nil
}

func RegisterPhotoServiceFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.DialContext(ctx, endpoint, opts...)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
		}()
	}()
	return RegisterPhotoServiceHandler(mux, conn)
}

func RegisterPhotoServiceHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterPhotoServiceHandlerClient(mux, NewPhotoServiceClient(conn))
}

func RegisterPhotoServiceHandlerClient(mux *runtime.ServeMux, client PhotoServiceClient) error {
	svc := newPhotoServiceResolver(client)
	// gRPC /photo.PhotoService/TotalPhotos
	mux.AddQuery("totalPhotos", svc.FieldTotalPhotos())
	// gRPC /photo.PhotoService/AllPhotos
	mux.AddQuery("allPhotos", svc.FieldAllPhotos())
	// gRPC /photo.PhotoService/Photo
	mux.AddQuery("photo", svc.FieldPhoto())
	// gRPC /photo.PhotoService/PostPhoto
	mux.AddMutation("postPhoto", svc.FieldPostPhoto())
	// gRPC /photo.PhotoService/TagPhoto
	mux.AddMutation("tagPhoto", svc.FieldTagPhoto())
	return nil
}
